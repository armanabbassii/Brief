export const playwrightQ = [
    {
      "title": "Locating Elements",
      "PossibleAnswers": [
        "By using `findElement()`",
        "By using CSS selectors",
        "By using `getElementById()`",
        "By using XPath"
      ],
      "TrueAnswerIndex": 1,
      "Description": "In Playwright, the most common way to locate elements is by using CSS selectors, which provide a flexible and powerful way to find elements in the DOM.",
      "Tag": "#selectors"
    },
    {
      "title": "Handling Multiple Browser Contexts",
      "PossibleAnswers": [
        "Playwright does not support multiple browser contexts",
        "By using `browser.newContext()`",
        "By launching a new browser instance",
        "By using `browser.newPage()`"
      ],
      "TrueAnswerIndex": 1,
      "Description": "Playwright allows you to create multiple browser contexts within a single browser instance using the `browser.newContext()` method, providing an isolated environment for each test.",
      "Tag": "#browser-contexts"
    },
    {
      "title": "Waiting for Elements",
      "PossibleAnswers": [
        "Using `page.waitForSelector()`",
        "Using `page.waitForTimeout()`",
        "Using `page.waitFor()`",
        "Using `page.wait()`"
      ],
      "TrueAnswerIndex": 0,
      "Description": "The `page.waitForSelector()` method in Playwright is used to wait for an element to appear in the DOM, which is essential for ensuring that elements are available before interacting with them.",
      "Tag": "#waiting"
    },
    {
      "title": "Taking Screenshots",
      "PossibleAnswers": [
        "`page.screenshot()`",
        "`page.takeScreenshot()`",
        "`browser.screenshot()`",
        "`element.screenshot()`"
      ],
      "TrueAnswerIndex": 0,
      "Description": "The `page.screenshot()` method is used to capture screenshots of the current page, useful for visual testing and debugging.",
      "Tag": "#screenshots"
    },
    {
      "title": "Running Tests in Headless Mode",
      "PossibleAnswers": [
        "Playwright does not support headless mode",
        "By setting `{ headless: true }` in the launch options",
        "By setting `{ headless: false }` in the launch options",
        "By using `browser.launchHeadless()`"
      ],
      "TrueAnswerIndex": 1,
      "Description": "Playwright can run browsers in headless mode by setting `{ headless: true }` in the launch options, which is useful for CI/CD pipelines and automated testing.",
      "Tag": "#headless-mode"
    },
    {
      "title": "Handling File Uploads",
      "PossibleAnswers": [
        "Using `page.uploadFile()`",
        "Using `page.setInputFiles()`",
        "Using `page.chooseFile()`",
        "Using `page.attachFile()`"
      ],
      "TrueAnswerIndex": 1,
      "Description": "The `page.setInputFiles()` method is used to handle file uploads in Playwright by specifying the file paths to be uploaded.",
      "Tag": "#file-upload"
    },
    {
      "title": "Emulating Mobile Devices",
      "PossibleAnswers": [
        "Using `page.emulateMobile()`",
        "Using `context.setDevice()`",
        "Using `context.newContext()`",
        "Using `browser.newContext()`"
      ],
      "TrueAnswerIndex": 3,
      "Description": "Playwright allows emulating mobile devices by using `browser.newContext()` with appropriate device descriptors.",
      "Tag": "#mobile-emulation"
    },
    {
      "title": "Interacting with Frames",
      "PossibleAnswers": [
        "Using `page.getFrame()`",
        "Using `page.switchToFrame()`",
        "Using `page.frame()`",
        "Using `page.selectFrame()`"
      ],
      "TrueAnswerIndex": 2,
      "Description": "The `page.frame()` method is used to interact with frames within a page in Playwright, allowing you to handle nested browsing contexts.",
      "Tag": "#frames"
    },
    {
      "title": "Generating PDFs",
      "PossibleAnswers": [
        "Using `page.printToPDF()`",
        "Using `page.createPDF()`",
        "Using `page.pdf()`",
        "Using `page.exportPDF()`"
      ],
      "TrueAnswerIndex": 2,
      "Description": "The `page.pdf()` method in Playwright is used to generate PDF files from the current page content, useful for generating reports or invoices.",
      "Tag": "#pdf-generation"
    },
    {
      "title": "Handling Alerts and Dialogs",
      "PossibleAnswers": [
        "Using `page.on('alert')`",
        "Using `page.on('dialog')`",
        "Using `page.on('popup')`",
        "Using `page.handleDialog()`"
      ],
      "TrueAnswerIndex": 1,
      "Description": "The `page.on('dialog')` event listener is used to handle alerts, confirms, prompts, and other dialogs in Playwright.",
      "Tag": "#dialogs"
    }
  ];
  